#ifndef PATH_H
#define PATH_H

#include <iostream>
#include <cstring>
#include <vector>

#include <ros/ros.h>
//#include <tf/transform_datatypes.h>
#include "core_msgs/Path3DArray.h"
#include "node3d.h"
#include "constants.h"
#include "helper.h"
namespace HybridAStar {
/*!
   \brief A class for tracing and visualizing the path generated by the Planner
*/

class Path {
 public:
  /// The default constructor initializing the path object and setting publishers for the same.
  Path(bool smoothed = false) {
    std::string pathTopic = "/path";
    if (smoothed) {
      pathTopic = "/sPath";
      this->smoothed = smoothed;
    }

    // _________________
    // TOPICS TO PUBLISH
    pubPath = n.advertise<core_msgs::Path3DArray>(pathTopic, 1);

    // CONFIGURE THE CONTAINER
    path.header.frame_id = "path";
  }

  void updatePath(std::vector<Node3D> nodePath);
  // ______________
  // PUBLISH METHODS

  /// Clears the path
  void clear();
  /// Publishes the path
  void publishPath() { pubPath.publish(path); }
  core_msgs::Path3DArray getPath() {return path;}

 private:
  /// A handle to the ROS node
  ros::NodeHandle n;
  /// Publisher for the path as a spline
  ros::Publisher pubPath;
  /// Path data structure for visualization
  core_msgs::Path3DArray path;
  bool smoothed = false;
};
}
#endif // PATH_H
